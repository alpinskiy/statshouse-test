// Copyright 2023 V Kontakte LLC
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Code generated by vktl/cmd/tlgen2; DO NOT EDIT.
package internal

import (
	"alpinskiy/statshouse-test/gen2/basictl"
)

var _ = basictl.NatWrite

type StatshouseAddMetricsBatch struct {
	FieldsMask uint32
	Metrics    []StatshouseMetric
}

func (StatshouseAddMetricsBatch) TLName() string { return "statshouse.addMetricsBatch" }
func (StatshouseAddMetricsBatch) TLTag() uint32  { return 0x56580239 }

func (item *StatshouseAddMetricsBatch) Reset() {
	item.FieldsMask = 0
	item.Metrics = item.Metrics[:0]
}

func (item *StatshouseAddMetricsBatch) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseMetricRead(w, &item.Metrics)
}

// This method is general version of Write, use it instead!
func (item *StatshouseAddMetricsBatch) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseAddMetricsBatch) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = BuiltinVectorStatshouseMetricWrite(w, item.Metrics)
	return w
}

func (item *StatshouseAddMetricsBatch) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x56580239); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseAddMetricsBatch) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseAddMetricsBatch) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x56580239)
	return item.Write(w)
}

func (item *StatshouseAddMetricsBatch) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseAddMetricsBatch) WriteResult(w []byte, ret True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

type StatshouseAddMetricsBatchBytes struct {
	FieldsMask uint32
	Metrics    []StatshouseMetricBytes
}

func (StatshouseAddMetricsBatchBytes) TLName() string { return "statshouse.addMetricsBatch" }
func (StatshouseAddMetricsBatchBytes) TLTag() uint32  { return 0x56580239 }

func (item *StatshouseAddMetricsBatchBytes) Reset() {
	item.FieldsMask = 0
	item.Metrics = item.Metrics[:0]
}

func (item *StatshouseAddMetricsBatchBytes) Read(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatRead(w, &item.FieldsMask); err != nil {
		return w, err
	}
	return BuiltinVectorStatshouseMetricBytesRead(w, &item.Metrics)
}

// This method is general version of Write, use it instead!
func (item *StatshouseAddMetricsBatchBytes) WriteGeneral(w []byte) (_ []byte, err error) {
	return item.Write(w), nil
}

func (item *StatshouseAddMetricsBatchBytes) Write(w []byte) []byte {
	w = basictl.NatWrite(w, item.FieldsMask)
	w = BuiltinVectorStatshouseMetricBytesWrite(w, item.Metrics)
	return w
}

func (item *StatshouseAddMetricsBatchBytes) ReadBoxed(w []byte) (_ []byte, err error) {
	if w, err = basictl.NatReadExactTag(w, 0x56580239); err != nil {
		return w, err
	}
	return item.Read(w)
}

// This method is general version of WriteBoxed, use it instead!
func (item *StatshouseAddMetricsBatchBytes) WriteBoxedGeneral(w []byte) (_ []byte, err error) {
	return item.WriteBoxed(w), nil
}

func (item *StatshouseAddMetricsBatchBytes) WriteBoxed(w []byte) []byte {
	w = basictl.NatWrite(w, 0x56580239)
	return item.Write(w)
}

func (item *StatshouseAddMetricsBatchBytes) ReadResult(w []byte, ret *True) (_ []byte, err error) {
	return ret.ReadBoxed(w)
}

func (item *StatshouseAddMetricsBatchBytes) WriteResult(w []byte, ret True) (_ []byte, err error) {
	w = ret.WriteBoxed(w)
	return w, nil
}

func (item *StatshouseAddMetricsBatch) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propMetricsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.addMetricsBatch", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "metrics":
				if propMetricsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.addMetricsBatch", "metrics")
				}
				if err := BuiltinVectorStatshouseMetricReadJSON(legacyTypeNames, in, &item.Metrics); err != nil {
					return err
				}
				propMetricsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.addMetricsBatch", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propMetricsPresented {
		item.Metrics = item.Metrics[:0]
	}
	return nil
}

func (item *StatshouseAddMetricsBatchBytes) UnmarshalJSON(b []byte) error {
	if err := item.ReadJSON(true, &basictl.JsonLexer{Data: b}); err != nil {
		return ErrorInvalidJSON("statshouse.addMetricsBatch", err.Error())
	}
	return nil
}

func (item *StatshouseAddMetricsBatchBytes) ReadJSON(legacyTypeNames bool, in *basictl.JsonLexer) error {
	var propFieldsMaskPresented bool
	var propMetricsPresented bool

	if in != nil {
		in.Delim('{')
		if !in.Ok() {
			return in.Error()
		}
		for !in.IsDelim('}') {
			key := in.UnsafeFieldName(true)
			in.WantColon()
			switch key {
			case "fields_mask":
				if propFieldsMaskPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.addMetricsBatch", "fields_mask")
				}
				if err := Json2ReadUint32(in, &item.FieldsMask); err != nil {
					return err
				}
				propFieldsMaskPresented = true
			case "metrics":
				if propMetricsPresented {
					return ErrorInvalidJSONWithDuplicatingKeys("statshouse.addMetricsBatch", "metrics")
				}
				if err := BuiltinVectorStatshouseMetricBytesReadJSON(legacyTypeNames, in, &item.Metrics); err != nil {
					return err
				}
				propMetricsPresented = true
			default:
				return ErrorInvalidJSONExcessElement("statshouse.addMetricsBatch", key)
			}
			in.WantComma()
		}
		in.Delim('}')
		if !in.Ok() {
			return in.Error()
		}
	}
	if !propFieldsMaskPresented {
		item.FieldsMask = 0
	}
	if !propMetricsPresented {
		item.Metrics = item.Metrics[:0]
	}
	return nil
}
